package sdhash

import "math"

type sdbfConf struct {
	ThreadCnt   uint32 // number of pthreads available
	EntrWinSize uint32
	BfSize      uint32
	PopWinSize  uint32
	BlockSize   uint32
	MaxElem     uint32 // maximum elements per bf
	MaxElemDd   uint32 // maximum elements per bf - dd mode
	Warnings    uint32 // whether to process warnings
	Threshold   uint32
	Popcnt      bool

	Entropy64Int [65]uint64
}

const (
	MaxThreadsCount = 512
	KB              = 1024
	MB              = KB * KB
	BfSize          = 256
	Bins            = 1000
	EntrPower       = 10
	EntrScale       = Bins * (1 << EntrPower)
	MinElemCount    = 16

	MinFileSize    = 512
	FlagOff        = 0
	MaxElemCount   = 160
	MaxElemCountDD = 192
	BigFilter      = 16384
	BigFilterElem  = 8738

	MagicStream    = "sdbf"
	SdbfVersion    = 3
	MagicDD        = "sdbf-dd"

	fpThreshold = 4
)

var Entr64Ranks = []uint32{
	000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
	000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
	000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
	000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
	000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000,
	101, 102, 106, 112, 108, 107, 103, 100, 109, 113, 128, 131, 141, 111, 146, 153, 148, 134, 145, 110,
	114, 116, 130, 124, 119, 105, 104, 118, 120, 132, 164, 180, 160, 229, 257, 211, 189, 154, 127, 115,
	129, 142, 138, 125, 136, 126, 155, 156, 172, 144, 158, 117, 203, 214, 221, 207, 201, 123, 122, 121,
	135, 140, 157, 150, 170, 387, 390, 365, 368, 341, 165, 166, 194, 174, 184, 133, 139, 137, 149, 173,
	162, 152, 159, 167, 190, 209, 238, 215, 222, 206, 205, 181, 176, 168, 147, 143, 169, 161, 249, 258,
	259, 254, 262, 217, 185, 186, 177, 183, 175, 188, 192, 195, 182, 151, 163, 199, 239, 265, 268, 242,
	204, 197, 193, 191, 218, 208, 171, 178, 241, 200, 236, 293, 301, 256, 260, 290, 240, 216, 237, 255,
	232, 233, 225, 210, 196, 179, 202, 212, 420, 429, 425, 421, 427, 250, 224, 234, 219, 230, 220, 269,
	247, 261, 235, 327, 332, 337, 342, 340, 252, 187, 223, 198, 245, 243, 263, 228, 248, 231, 275, 264,
	298, 310, 305, 309, 270, 266, 251, 244, 213, 227, 273, 284, 281, 318, 317, 267, 291, 278, 279, 303,
	452, 456, 453, 446, 450, 253, 226, 246, 271, 277, 295, 302, 299, 274, 276, 285, 292, 289, 272, 300,
	297, 286, 314, 311, 287, 283, 288, 280, 296, 304, 308, 282, 402, 404, 401, 415, 418, 313, 320, 307,
	315, 294, 306, 326, 321, 331, 336, 334, 316, 328, 322, 324, 325, 330, 329, 312, 319, 323, 352, 345,
	358, 373, 333, 346, 338, 351, 343, 405, 389, 396, 392, 411, 378, 350, 388, 407, 423, 419, 409, 395,
	353, 355, 428, 441, 449, 474, 475, 432, 457, 448, 435, 462, 470, 467, 468, 473, 426, 494, 487, 506,
	504, 517, 465, 459, 439, 472, 522, 520, 541, 540, 527, 482, 483, 476, 480, 721, 752, 751, 728, 730,
	490, 493, 495, 512, 536, 535, 515, 528, 518, 507, 513, 514, 529, 516, 498, 492, 519, 508, 544, 547,
	550, 546, 545, 511, 532, 543, 610, 612, 619, 649, 691, 561, 574, 591, 572, 553, 551, 565, 597, 593,
	580, 581, 642, 578, 573, 626, 696, 584, 585, 595, 590, 576, 579, 583, 605, 569, 560, 558, 570, 556,
	571, 656, 657, 622, 624, 631, 555, 566, 564, 562, 557, 582, 589, 603, 598, 604, 586, 577, 588, 613,
	615, 632, 658, 625, 609, 614, 592, 600, 606, 646, 660, 666, 679, 685, 640, 645, 675, 681, 672, 747,
	723, 722, 697, 686, 601, 647, 677, 741, 753, 750, 715, 707, 651, 638, 648, 662, 667, 670, 684, 674,
	693, 678, 664, 652, 663, 639, 680, 682, 698, 695, 702, 650, 676, 669, 665, 688, 687, 701, 700, 706,
	683, 718, 703, 713, 720, 716, 735, 719, 737, 726, 744, 736, 742, 740, 739, 731, 711, 725, 710, 704,
	708, 689, 729, 727, 738, 724, 733, 692, 659, 705, 654, 690, 655, 671, 628, 634, 621, 616, 630, 599,
	629, 611, 620, 607, 623, 618, 617, 635, 636, 641, 637, 633, 644, 653, 699, 694, 714, 734, 732, 746,
	749, 755, 745, 757, 756, 758, 759, 761, 763, 765, 767, 771, 773, 774, 775, 778, 782, 784, 786, 788,
	793, 794, 797, 798, 803, 804, 807, 809, 816, 818, 821, 823, 826, 828, 829, 834, 835, 839, 843, 846,
	850, 859, 868, 880, 885, 893, 898, 901, 904, 910, 911, 913, 916, 919, 922, 924, 930, 927, 931, 938,
	940, 937, 939, 941, 934, 936, 932, 933, 929, 928, 926, 925, 923, 921, 920, 918, 917, 915, 914, 912,
	909, 908, 907, 906, 900, 903, 902, 905, 896, 899, 897, 895, 891, 894, 892, 889, 883, 890, 888, 879,
	887, 886, 882, 878, 884, 877, 875, 872, 876, 870, 867, 874, 873, 871, 869, 881, 863, 865, 864, 860,
	853, 855, 852, 849, 857, 856, 862, 858, 861, 854, 851, 848, 847, 845, 844, 841, 840, 837, 836, 833,
	832, 831, 830, 827, 824, 825, 822, 820, 819, 817, 815, 812, 814, 810, 808, 806, 805, 799, 796, 795,
	790, 787, 785, 783, 781, 777, 776, 772, 770, 768, 769, 764, 762, 760, 754, 743, 717, 712, 668, 661,
	643, 627, 608, 594, 587, 568, 559, 552, 548, 542, 539, 537, 534, 533, 531, 525, 521, 510, 505, 497,
	496, 491, 486, 485, 478, 477, 466, 469, 463, 458, 460, 444, 440, 424, 433, 403, 410, 394, 393, 385,
	377, 379, 382, 383, 380, 384, 372, 370, 375, 366, 354, 363, 349, 357, 347, 364, 367, 359, 369, 360,
	374, 344, 376, 335, 371, 339, 361, 348, 356, 362, 381, 386, 391, 397, 399, 398, 412, 408, 414, 422,
	416, 430, 417, 434, 400, 436, 437, 438, 442, 443, 447, 406, 451, 413, 454, 431, 455, 445, 461, 464,
	471, 479, 481, 484, 489, 488, 499, 500, 509, 530, 523, 538, 526, 549, 554, 563, 602, 596, 673, 567,
	748, 575, 766, 709, 779, 780, 789, 813, 811, 838, 842, 866, 942, 935, 944, 943, 947, 952, 951, 955,
	954, 957, 960, 959, 967, 966, 969, 962, 968, 953, 972, 961, 982, 979, 978, 981, 980, 990, 987, 988,
	984, 983, 989, 985, 986, 977, 976, 975, 973, 974, 970, 971, 965, 964, 963, 956, 958, 524, 950, 948,
	949, 945, 946, 800, 801, 802, 791, 792, 501, 502, 503, 000, 000, 000, 000, 000, 000, 000, 000, 000,
	000,
}

var Cutoffs256 = []uint32{
	1250, 1250, 1250, 1250, 1006, 806, 650, 534, 442, 374, 319, 273, 240, 210, 184, 166,
	148, 132, 121, 110, 100, 93, 85, 78, 72, 67, 63, 59, 55, 52, 48, 45,
	43, 40, 38, 37, 35, 32, 31, 30, 28, 27, 26, 25, 24, 23, 22, 21, 20,
	19, 19, 18, 18, 17, 16, 15, 15, 15, 15, 14, 13, 13, 12, 12, 12, 12, 12, 11, 11,
	10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 7, 7,
	7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
}

var Cutoffs64 = []uint32{
	354, 354, 354, 354, 277, 220, 178, 147, 123, 105, 90, 80, 70, 61, 57, 50,
	46, 42, 37, 35, 33, 29, 27, 26, 24, 23, 22, 21, 19, 19, 18, 17,
	16, 15, 14, 14, 14, 14, 13, 13, 11, 11, 11, 11, 10, 10, 10, 10, 9,
	9, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
}

var BFClassMask = []uint32{0x7FF, 0x7FFF, 0x7FFFF, 0x7FFFFF, 0x7FFFFFF, 0xFFFFFFFF}

var Bits = []uint8{0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}

var bitCount16 = [64 * KB]uint8{}
var bfEstCache = [256][256]uint16{}
var entropy64Int = [65]uint64{}

func NewSdbfConf(threadCount uint32, warnings uint32, maxElemCt uint32, maxElemCtDD uint32) *sdbfConf {
	sc := &sdbfConf{
		EntrWinSize: 64,
		BfSize:      256,
		BlockSize:   4 * KB,
		PopWinSize:  64,
		MaxElem:     maxElemCt,
		MaxElemDd:   maxElemCtDD,
		Warnings:    warnings,
		Threshold:   16,
	}

	if threadCount <= MaxThreadsCount {
		sc.ThreadCnt = threadCount
	} else {
		sc.ThreadCnt = MaxThreadsCount
	}

	sc.initBitCount16()
	sc.entr64TableInitInt()

	// todo: check popcnt availability

	return sc
}

func (sc *sdbfConf) initBitCount16() {
	// todo: memset 0 bit_count_16
	for b := 0; b < 64*KB; b++ {
		for bit := 0; bit < 16; bit++ {
			if b&0x1<<bit != 0 {
				bitCount16[b]++
			}
		}
	}
	// todo: memset 0 bf_est_cache
}

/*
 * 64-byte entropy function implementations
 */

/**
Entropy lookup table setup--int64 version (to be called once)
*/
func (sc *sdbfConf) entr64TableInitInt() {
	for i := 0; i <= 64; i++ {
		p := float64(i) / 64
		entropy64Int[i] = uint64((-p * (math.Log(p) / math.Log(2)) / 6) * EntrScale)
	}
}

/**
Baseline entropy computation for a 64-byte buffer--int64 version (to be called periodically)
*/
func (sc *sdbfConf) entr64InitInt(buffer []uint8, ascii []uint8) uint64 {
	// todo: skip reset ascii, should be already zero
	for i := 0; i < 64; i++ {
		ascii[buffer[i]]++
	}
	var entr uint64
	for i := 0; i < 256; i++ {
		if ascii[i] > 0 {
			entr += config.Entropy64Int[ascii[i]]
		}
	}
	return entr
}

/**
 * Incremental (rolling) update to entropy computation--int64 version
 */
func (sc *sdbfConf) entr64IncInt(prevEntropy uint64, buffer []uint8, ascii []uint8) uint64 {
	if buffer[0] == buffer[64] {
		return prevEntropy
	}

	oldCharCnt := ascii[buffer[0]]
	newCharCnt := ascii[buffer[64]]

	if oldCharCnt == newCharCnt+1 {
		return prevEntropy
	}

	oldDiff := int64(sc.Entropy64Int[oldCharCnt]) - int64(sc.Entropy64Int[oldCharCnt-1])
	newDiff := int64(sc.Entropy64Int[newCharCnt+1]) - int64(sc.Entropy64Int[newCharCnt])

	entropy := int64(prevEntropy) - oldDiff + newDiff
	if entropy < 0 {
		entropy = 0
	} else if entropy > EntrScale {
		entropy = EntrScale
	}

	return uint64(entropy)
}
